"""
Copyright (c) 2012-2023 Oscar Riveros [https://twitter.com/maxtuno].
Copyright (c) 2023 Bal√°zs Gl√°vits <balazs@glavits.hu>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

from __future__ import annotations

from typing import Sequence, SupportsInt, Callable

import satx
from satx.unit import Unit

"""
The Global Constraint Catalog implementation for SAT-X.
"""


def abs_val(x, y):
    """
    Enforce the fact that the first variable is equal to the absolute value of the second variable.
    """
    satx.SatXEngine.abs_val(x, y)


def all_differ_from_at_least_k_pos(k: Unit | SupportsInt, lst: Sequence[Sequence[Unit | SupportsInt]]):
    """
    Enforce all pairs of distinct vectors of the VECTORS collection to differ from at least K positions.
    """
    return satx.get_engine().all_differ_from_at_least_k_pos(k, lst)


def all_differ_from_at_most_k_pos(k: Unit | SupportsInt, lst: Sequence[Sequence[Unit | SupportsInt]]):
    """
    Enforce all pairs of distinct vectors of the VECTORS collection to differ from at most K positions.
    """
    return satx.get_engine().all_differ_from_at_least_k_pos(k, lst)


def all_differ_from_exactly_k_pos(k: Unit | SupportsInt, lst: Sequence[Sequence[Unit | SupportsInt]]):
    """
    Enforce all pairs of distinct vectors of the VECTORS collection to differ from exactly K positions.
    Enforce K = 0 when |VECTORS| < 2.
    """
    satx.get_engine().all_differ_from_exactly_k_pos(k, lst)


def all_equal(lst: Sequence):
    """
    Enforce all variables of the collection
    """
    satx.SatXEngine.all_equal(lst)


def all_different(lst: Sequence):
    """
    Enforce all variables of the collection ùöÖùô∞ùöÅùô∏ùô∞ùô±ùôªùô¥ùöÇ to take distinct values.
    """
    satx.SatXEngine.all_different(lst)


def element(idx: Unit | SupportsInt, lst: Sequence[Unit | SupportsInt], val: Unit | SupportsInt):
    """
    ùöÖùô∞ùôªùöÑùô¥ is equal to the ùô∏ùôΩùô≥ùô¥ùöá-th item of ùöÉùô∞ùô±ùôªùô¥, i.e. ùöÖùô∞ùôªùöÑùô¥ = ùöÉùô∞ùô±ùôªùô¥[ùô∏ùôΩùô≥ùô¥ùöá].
    """
    satx.get_engine().assert_element(idx, lst, val)


def gcd(x: Unit | int, y: Unit | int, z: Unit | int):
    """
    Enforce the fact that ùöâ is the greatest common divisor of ùöá and ùöà. (assume X <= Y)
    """
    satx.SatXEngine.gcd(x, y, z)


def sort(lst1: Sequence[Unit | SupportsInt], lst2: Sequence[Unit | SupportsInt]):
    """
    First, the variables of the collection ùöÖùô∞ùöÅùô∏ùô∞ùô±ùôªùô¥ùöÇ 2 correspond to a permutation of the variables of ùöÖùô∞ùöÅùô∏ùô∞ùô±ùôªùô¥ùöÇ 1.
    Second, the variables of ùöÖùô∞ùöÅùô∏ùô∞ùô±ùôªùô¥ùöÇ 2 are sorted in increasing order.
    """
    satx.get_engine().sort(lst1, lst2)


def sort_permutation(lst_from: Sequence[Unit | SupportsInt], lst_per: Sequence[Unit | SupportsInt],
                     lst_to: Sequence[Unit | SupportsInt]):
    """
    The variables of collection ùôµùöÅùôæùôº correspond to the variables of collection ùöÉùôæ according to the permutation
    ùôøùô¥ùöÅùôºùöÑùöÉùô∞ùöÉùô∏ùôæùôΩ (i.e., ùôµùöÅùôæùôº[i].ùöüùöäùöõ=ùöÉùôæ[ùôøùô¥ùöÅùôºùöÑùöÉùô∞ùöÉùô∏ùôæùôΩ[i].ùöüùöäùöõ].ùöüùöäùöõ). The variables of
    collection ùöÉùôæ are also sorted in increasing order.
    """
    satx.get_engine().sort_permutation(lst_from, lst_per, lst_to)


def count(val: Unit | int, lst: Sequence[Unit | int], rel: Callable, lim: Unit | SupportsInt):
    """
    Let N be the number of variables of the ùöÖùô∞ùöÅùô∏ùô∞ùô±ùôªùô¥ùöÇ collection assigned to value ùöÖùô∞ùôªùöÑùô¥;
    Enforce condition N ùöÅùô¥ùôªùôæùôø ùôªùô∏ùôºùô∏ùöÉ to hold.
    """
    satx.get_engine().count(val, lst, rel, lim)
